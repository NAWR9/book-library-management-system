<!DOCTYPE html>
<html lang="<%= locals.htmlLang || 'en' %>" dir="<%= locals.rtl ? 'rtl' : 'ltr' %>">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %> | University Library</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet" />
     <!-- Dark mode icon -->
     <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&amp;icon_names=dark_mode">
     <!-- Light Mode icon -->
     <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0&amp;icon_names=light_mode">
    
    <!-- FontAwesome Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/styles.css" />
    <link rel="icon" href="/img/unistack.svg" type="image/svg+xml">
    <link rel="icon" href="/img/unistack.png" sizes="32x32" type="image/png">
    <link rel="stylesheet" href="/css/category-input.css" />
    <% if (locals.pageStyles) { %><%- pageStyles %><% } %>
  </head>
  <body class="d-flex flex-column min-vh-100 <%= locals.bodyClass || '' %>">
    <!-- Load Navbar -->
    <%- include('./partials/navbar') %>

    <main class="flex-grow-1">
      <!-- Flash Messages -->
      <div class="container mt-3">
        <% if(locals.success_msg && success_msg.length > 0) { %>
          <div class="alert alert-success alert-dismissible fade show">
            <%= success_msg %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        <% } %>
        <% if(locals.error_msg && error_msg.length > 0) { %>
          <div class="alert alert-warning alert-dismissible fade show">
            <%= error_msg %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        <% } %>
        <% if(locals.error && error.length > 0) { %>
          <div class="alert alert-danger alert-dismissible fade show">
            <%= error %>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        <% } %>
      </div>
      <!-- Page Content -->
      <%- body %>
    </main>

    <!-- Footer -->
    <%- include('./partials/footer') %>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
      window.API_BASE_URL = "<%= locals.API_BASE_URL %>";
    </script>
    
    <% if (locals.pageScript) { %>
      <script type="application/json" id="i18n-data">
        <%- JSON.stringify({
          // Auth messages
          loading: t('auth.loading'),
          loginSuccess: t('auth.loginSuccess'),
          registerSuccess: t('auth.registerSuccess'),
          serverConnectError: t('auth.serverConnectError'),
          userExists: t('auth.userExists'),
          provideBoth: t('auth.provideBoth'),
          invalidCredentials: t('auth.invalidCredentials'),
          profileUpdateSuccess: t('auth.profileUpdateSuccess'),
          errorUpdatingProfile: t('auth.errorUpdatingProfile'),
          passwordMinLength: t('register.passwordMinLength'),
          passwordsDoNotMatch: t('login.passwordsDoNotMatch'),
          
          // Button labels
          loginButton: t('login.loginButton'),
          createAccount: t('register.createAccount'),
          updateProfile: t('profile.updateProfile'),
          sendResetLink: t('login.sendResetLink'),
          resetPassword: t('login.resetPassword'),
          
          // API status messages
          serverOnline: t('api.serverOnline'),
          serverOffline: t('api.serverOffline'),
          serverError: t('api.serverError'),
          
          // Form validation
          emailError: t('login.emailError'),
          
          // Book and category related translations
          books: {
            noCategoriesAdded: t('books.noCategoriesAdded'),
            english: t('books.english'),
            arabic: t('books.arabic'),
            selectCategories: t('books.selectCategories'),
            selectFromAvailableCategories: t('books.selectFromAvailableCategories'),
            categoryHelpText: t('books.categoryHelpText'),
            selectedCategories: t('books.selectedCategories'),
            categoriesMappedAutomatically: t('books.categoriesMappedAutomatically'),
            search: t('books.search'),
            categoryMatchSuccess: t('books.categoryMatchSuccess'),
            categoryMatchPartialSuccess: t('books.categoryMatchPartialSuccess'),
            categoryMatchFailure: t('books.categoryMatchFailure'),
            publisher: t('books.publisher'),
            category: t('books.category'),
            unknownTitle: t('books.unknownTitle', 'Unknown Title'),
            unknownAuthor: t('books.unknownAuthor', 'Unknown Author'),
            unknownDate: t('books.unknownDate', 'Unknown Date'),
            by: t('books.by'),
            viewDetails: t('books.viewDetails'),
            fullDetails: t('books.fullDetails'),
            noDescription: t('books.noDescription'),
            noBooksFound: t('books.noBooksFound'),
            noBooksFoundMatching: t('books.noBooksFoundMatching')
          },
          
          // UI elements translations
          ui: {
            selectCategory: t('books.selectCategory')
          },
          
          // Toast messages
          toast: {
            error: t('common.error', 'Error'),
            success: t('common.success', 'Success'),
            warning: t('common.warning', 'Warning'),
            info: t('common.info', 'Information'),
            searchRequired: t('books.searchTextRequired', 'Please enter search text'),
            failedToAdd: t('books.failedToAdd', 'Failed to add book'),
            tryAgain: t('common.tryAgain', 'Please try again.')
          },
          // Dashboard translations
          dashboard: t('dashboard', { returnObjects: true }),
          // add untranslated fallback in case
          dashboardNoPending: t('dashboard.noPendingRequests'),
          // Category group translations for the category selection dropdown
          categoryGroups: t("categoryGroups", { returnObjects: true }),
          
          // Book categories translations for the category selection dropdown
          "bookCategories": t("bookCategories", { returnObjects: true })
        }) %>
      </script>
      <script>
        window.i18nMessages = JSON.parse(
          document.getElementById('i18n-data').textContent
        );
      </script>
      <!-- Load shared components -->
      <script src="/js/components/categoryManager.js"></script>
      <script type="module" src="/js/pages/<%= locals.pageScript %>.js"></script>
    <% } %>
    <!-- Language switcher script -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.language-switcher button[data-lang]').forEach((btn) => {
          btn.addEventListener('click', function () {
            const lang = this.getAttribute('data-lang');
            const url = new URL(window.location.href);
            url.searchParams.set('lang', lang);
            window.location.href = url.toString();
          });
        });
      });
    </script>
  </body>
</html>